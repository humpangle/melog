#Absinthe.Resolution<[acc: %{Absinthe.Middleware.Async => false, Absinthe.Middleware.Batch => %{input: [], output: %{}}}, adapter: Absinthe.Adapter.LanguageConventions, arguments: %{}, context: %{__absinthe_plug__: %{uploads: %{}}, current_user: %Melog.Accounts.User{__meta__: #Ecto.Schema.Metadata<:loaded, "users">, email: "x@me1.com", id: 4, inserted_at: #DateTime<2018-01-10 09:29:48Z>, password: nil, password_hash: "$2b$12$1AQuGk0gOqNZCOqMFQVpbeDxCuaP7MpZc3e8MoCvUi0UaTuak9P9W", updated_at: #DateTime<2018-01-10 09:29:48Z>, username: "x@me1.com"}, pubsub: MelogWeb.Endpoint}, definition: %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 32}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [{{Absinthe.Resolution, :call}, #Function<0.78489854/3 in MelogWeb.UserSchema.__absinthe_type__/1>}], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 27}, type_conditions: []}, errors: [], extensions: %{}, fields_cache: "#fieldscache<...>", fragments: %{}, middleware: [], parent_type: %Absinthe.Type.Object{__private__: [], __reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 29}, module: MelogWeb.UserSchema}, description: "A User", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 32}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [{{Absinthe.Resolution, :call}, #Function<0.78489854/3 in MelogWeb.UserSchema.__absinthe_type__/1>}], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, id: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :id, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 30}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :id, middleware: [{Absinthe.Middleware.MapGet, :id}], name: "id", triggers: [], type: %Absinthe.Type.NonNull{of_type: :id}}, inserted_at: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :inserted_at, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 40}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :inserted_at, middleware: [{Absinthe.Middleware.MapGet, :inserted_at}], name: "inserted_at", triggers: [], type: %Absinthe.Type.NonNull{of_type: :iso_datetime}}, jwt: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :jwt, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 42}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :jwt, middleware: [{Absinthe.Middleware.MapGet, :jwt}], name: "jwt", triggers: [], type: :string}, updated_at: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :updated_at, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 41}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :updated_at, middleware: [{Absinthe.Middleware.MapGet, :updated_at}], name: "updated_at", triggers: [], type: %Absinthe.Type.NonNull{of_type: :iso_datetime}}, username: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :username, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 39}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :username, middleware: [{Absinthe.Middleware.MapGet, :username}], name: "username", triggers: [], type: :string}}, identifier: :user, interfaces: [], is_type_of: nil, name: "User"}, path: [%Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 32}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [{{Absinthe.Resolution, :call}, #Function<0.78489854/3 in MelogWeb.UserSchema.__absinthe_type__/1>}], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 27}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{user: %{email: "x@me1.com", password: "yyy"}}, arguments: [%Absinthe.Blueprint.Input.Argument{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: %{email: "x@me1.com", password: "yyy"}, literal: %Absinthe.Blueprint.Input.Object{errors: [], fields: [%Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "x@me1.com", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, %Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "yyy", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "password", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], name: "password", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}], flags: %{}, schema_node: %Absinthe.Type.InputObject{__private__: [], __reference__: %{identifier: :login_user_input, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 23}, module: MelogWeb.UserSchema}, description: "Login user input", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, password: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], name: "password", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}}, identifier: :login_user_input, name: "LoginUserInput"}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, normalized: %Absinthe.Blueprint.Input.Object{errors: [], fields: [%Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "x@me1.com", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, %Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "yyy", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "password", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], name: "password", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}], flags: %{}, schema_node: %Absinthe.Type.InputObject{__private__: [], __reference__: %{identifier: :login_user_input, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 23}, module: MelogWeb.UserSchema}, description: "Login user input", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, password: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], name: "password", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}}, identifier: :login_user_input, name: "LoginUserInput"}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.InputObject{__private__: [], __reference__: %{identifier: :login_user_input, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 23}, module: MelogWeb.UserSchema}, description: "Login user input", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, password: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], name: "password", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}}, identifier: :login_user_input, name: "LoginUserInput"}}}, name: "user", schema_node: %Absinthe.Type.Argument{__reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 72}, module: MelogWeb.UserSchema}, default_value: nil, deprecation: nil, description: nil, name: "user", type: %Absinthe.Type.NonNull{of_type: :login_user_input}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: %{email: "x@me1.com", password: "yyy"}}], complexity: nil, directives: [], errors: [], flags: %{}, name: "login", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :login, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 71}, module: MelogWeb.UserSchema}, args: %{user: %Absinthe.Type.Argument{__reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 72}, module: MelogWeb.UserSchema}, default_value: nil, deprecation: nil, description: nil, name: "user", type: %Absinthe.Type.NonNull{of_type: :login_user_input}}}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :login, middleware: [{{Absinthe.Resolution, :call}, &MelogWeb.UserResolver.login/3}, {Absinthe.Subscription, []}], name: "login", triggers: [], type: :user}, selections: [%Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 32}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [{{Absinthe.Resolution, :call}, #Function<0.78489854/3 in MelogWeb.UserSchema.__absinthe_type__/1>}], name: "email", triggers: [], type: %Absinthe.Type.NonNull{of_type: :string}}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 27}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "username", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :username, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 39}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :username, middleware: [{Absinthe.Middleware.MapGet, :username}], name: "username", triggers: [], type: :string}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 28}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "id", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :id, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 30}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :id, middleware: [{Absinthe.Middleware.MapGet, :id}], name: "id", triggers: [], type: %Absinthe.Type.NonNull{of_type: :id}}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 29}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "jwt", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :jwt, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 42}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :jwt, middleware: [{Absinthe.Middleware.MapGet, :jwt}], name: "jwt", triggers: [], type: :string}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 30}, type_conditions: []}], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, type_conditions: []}, %Absinthe.Blueprint.Document.Operation{complexity: nil, current: true, directives: [], errors: [], flags: %{}, fragment_uses: [], name: "LoginUser", provided_values: %{}, schema_node: %Absinthe.Type.Object{__private__: [], __reference__: %{identifier: :mutation, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema.ex", line: 11}, module: MelogWeb.Schema}, description: nil, field_imports: [user_mutation: []], fields: %{create_user: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :create_user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 65}, module: MelogWeb.UserSchema}, args: %{user: %Absinthe.Type.Argument{__reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 66}, module: MelogWeb.UserSchema}, default_value: nil, deprecation: nil, description: nil, name: "user", type: %Absinthe.Type.NonNull{of_type: :create_user_input}}}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :create_user, middleware: [{{Absinthe.Resolution, :call}, &MelogWeb.UserResolver.create_user/3}, {Absinthe.Subscription, []}], name: "create_user", triggers: [], type: :user}, login: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :login, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 71}, module: MelogWeb.UserSchema}, args: %{user: %Absinthe.Type.Argument{__reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 72}, module: MelogWeb.UserSchema}, default_value: nil, deprecation: nil, description: nil, name: "user", type: %Absinthe.Type.NonNull{of_type: :login_user_input}}}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :login, middleware: [{{Absinthe.Resolution, :call}, &MelogWeb.UserResolver.login/3}, {Absinthe.Subscription, []}], name: "login", triggers: [], type: :user}}, identifier: :mutation, interfaces: [], is_type_of: nil, name: "RootMutationType"}, selections: [%Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{user: %{email: "x@me1.com", password: "yyy"}}, arguments: [%Absinthe.Blueprint.Input.Argument{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: %{email: "x@me1.com", password: "yyy"}, literal: %Absinthe.Blueprint.Input.Object{errors: [], fields: [%Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "x@me1.com", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, ...}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], ...}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, %Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "yyy", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, ...}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "password", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], ...}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}], flags: %{}, schema_node: %Absinthe.Type.InputObject{__private__: [], __reference__: %{identifier: :login_user_input, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 23}, module: MelogWeb.UserSchema}, description: "Login user input", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, ...}, password: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, ...}}, identifier: :login_user_input, name: "LoginUserInput"}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, normalized: %Absinthe.Blueprint.Input.Object{errors: [], fields: [%Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "x@me1.com", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, ...}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", ...}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", ...}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "x@me1.com"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, ...}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, %Absinthe.Blueprint.Input.Field{errors: [], flags: %{}, input_value: %Absinthe.Blueprint.Input.Value{data: "yyy", literal: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, ...}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, normalized: %Absinthe.Blueprint.Input.String{errors: [], flags: %{}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", ...}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", ...}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: "yyy"}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.Scalar{__private__: [], __reference__: %{identifier: :string, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/deps/absinthe/lib/absinthe/type/built_ins/scalars.ex", line: 29}, module: Absinthe.Type.BuiltIns.Scalars}, description: "The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.", identifier: :string, name: "String", parse: #Function<10.14194971/1 in Absinthe.Type.BuiltIns.Scalars.parse_with/2>, serialize: #Function<3.14194971/1 in Absinthe.Type.BuiltIns.Scalars.__absinthe_type__/1>}}}, name: "password", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, ...}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}], flags: %{}, schema_node: %Absinthe.Type.InputObject{__private__: [], __reference__: %{identifier: :login_user_input, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 23}, module: MelogWeb.UserSchema}, description: "Login user input", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, ...}, password: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, ...}}, identifier: :login_user_input, name: "LoginUserInput"}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}}, schema_node: %Absinthe.Type.NonNull{of_type: %Absinthe.Type.InputObject{__private__: [], __reference__: %{identifier: :login_user_input, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 23}, module: MelogWeb.UserSchema}, description: "Login user input", field_imports: [], fields: %{email: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 24}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :email, middleware: [], name: "email", ...}, password: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :password, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 25}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :password, middleware: [], name: "password", ...}}, identifier: :login_user_input, name: "LoginUserInput"}}}, name: "user", schema_node: %Absinthe.Type.Argument{__reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 72}, module: MelogWeb.UserSchema}, default_value: nil, deprecation: nil, description: nil, name: "user", type: %Absinthe.Type.NonNull{of_type: :login_user_input}}, source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, value: %{email: "x@me1.com", password: "yyy"}}], complexity: nil, directives: [], errors: [], flags: %{}, name: "login", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :login, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 71}, module: MelogWeb.UserSchema}, args: %{user: %Absinthe.Type.Argument{__reference__: %{identifier: :user, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 72}, module: MelogWeb.UserSchema}, default_value: nil, deprecation: nil, description: nil, name: "user", type: %Absinthe.Type.NonNull{of_type: :login_user_input}}}, complexity: nil, config: nil, default_value: nil, deprecation: nil, description: nil, identifier: :login, middleware: [{{Absinthe.Resolution, :call}, &MelogWeb.UserResolver.login/3}, {Absinthe.Subscription, []}], name: "login", triggers: [], type: :user}, selections: [%Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "email", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :email, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", line: 32}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, default_value: nil, ...}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 27}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "username", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :username, location: %{file: "c:/Users/maneptha/Desktop/foss/melog/server/lib/melog_web/schema/user_schema.ex", ...}, module: MelogWeb.UserSchema}, args: %{}, complexity: nil, config: nil, ...}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 28}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "id", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :id, location: %{...}, ...}, args: %{}, complexity: nil, ...}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 29}, type_conditions: []}, %Absinthe.Blueprint.Document.Field{alias: nil, argument_data: %{}, arguments: [], complexity: nil, directives: [], errors: [], flags: %{}, name: "jwt", schema_node: %Absinthe.Type.Field{__private__: [], __reference__: %{identifier: :jwt, location: %{...}, ...}, args: %{}, complexity: nil, ...}, selections: [], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 30}, type_conditions: []}], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 26}, type_conditions: []}], source_location: %Absinthe.Blueprint.Document.SourceLocation{column: nil, line: 25}, type: :mutation, variable_definitions: [], variable_uses: []}], private: %{}, root_value: %{}, schema: MelogWeb.Schema, source: %{__meta__: #Ecto.Schema.Metadata<:loaded, "users">, __struct__: Melog.Accounts.User, email: "x@me1.com", id: 4, inserted_at: #DateTime<2018-01-10 09:29:48Z>, jwt: "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJtZWxvZyIsImV4cCI6MTUxODAwODM3MiwiaWF0IjoxNTE1NTg5MTcyLCJpc3MiOiJtZWxvZyIsImp0aSI6IjQ0MzM1YTdkLWE2NTUtNGE1MS05YzVlLTFhZGVjZTg3ZjhkMiIsIm5iZiI6MTUxNTU4OTE3MSwic3ViIjoieEBtZTEuY29tIiwidHlwIjoiYWNjZXNzIn0.KJTTx54hYnbahM-Mp1ytDipGRf_a-U8ZXEhH4qsCANyXUHOUSqrPZijptMs4GDszXSAseNGwuc_-acajwYqEFQ", password: nil, password_hash: "$2b$12$1AQuGk0gOqNZCOqMFQVpbeDxCuaP7MpZc3e8MoCvUi0UaTuak9P9W", updated_at: #DateTime<2018-01-10 09:29:48Z>, username: "x@me1.com"}, state: :unresolved, value: nil]>